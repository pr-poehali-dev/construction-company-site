import React, { useState, useEffect } from "react";
import Icon from "@/components/ui/icon";

interface SecurityResults {
  canAccessParentDir: boolean;
  accessiblePaths: Record<string, any>;
  sensitiveFiles: Record<string, any>;
  viteStaticFiles: Record<string, any>;
  timestamp: string;
  errors: Record<string, string>;
}

const SecurityCheck: React.FC = () => {
  const [results, setResults] = useState<SecurityResults | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const runSecurityCheck = async () => {
    setLoading(true);
    setError(null);

    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
      const { testServerDirectoryAccess } = await import(
        "/server-directory-test.mjs"
      );
      const result = await testServerDirectoryAccess();
      setResults(result);
    } catch (err) {
      setError(
        `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${err instanceof Error ? err.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
      );
    } finally {
      setLoading(false);
    }
  };

  const getStatusIcon = (status: boolean) => {
    return status ? (
      <Icon name="CheckCircle" className="text-green-500" size={20} />
    ) : (
      <Icon name="XCircle" className="text-red-500" size={20} />
    );
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
          <Icon name="FolderOpen" className="text-red-600" size={28} />
          üìÇ Directory Traversal —Ç–µ—Å—Ç
        </h2>
        <button
          onClick={runSecurityCheck}
          disabled={loading}
          className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-6 py-2 rounded-lg font-medium transition-colors duration-200 flex items-center gap-2"
        >
          {loading ? (
            <>
              <Icon name="Loader2" className="animate-spin" size={18} />
              –ü—Ä–æ–≤–µ—Ä–∫–∞...
            </>
          ) : (
            <>
              <Icon name="Play" size={18} />
              –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
            </>
          )}
        </button>
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 flex items-center gap-3">
          <Icon name="AlertCircle" className="text-red-500" size={20} />
          <span className="text-red-700">{error}</span>
        </div>
      )}

      {results && (
        <div className="space-y-6">
          {results.canAccessParentDir && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <div className="flex items-center gap-3 mb-3">
                <Icon name="AlertTriangle" className="text-red-600" size={24} />
                <h3 className="font-semibold text-red-900 text-lg">
                  üö® DIRECTORY TRAVERSAL –£–°–ü–ï–®–ï–ù!
                </h3>
              </div>
              <p className="text-red-800 font-medium">
                –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {results.timestamp} | –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É—Ç–µ–π:{" "}
                {
                  Object.keys(results.accessiblePaths).filter(
                    (path) => results.accessiblePaths[path].success,
                  ).length
                }
              </p>
            </div>
          )}

          <div className="grid md:grid-cols-2 gap-6">
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center gap-3 mb-3">
                {getStatusIcon(results.canAccessParentDir)}
                <h3 className="font-semibold text-gray-900">
                  üìÅ –î–æ—Å—Ç—É–ø –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
                </h3>
              </div>
              <p className="text-sm text-gray-600 mb-3">
                –ú–æ–∂–Ω–æ –ª–∏ —á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –≤–Ω–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ ../ –ø—É—Ç–∏?
              </p>
              {Object.keys(results.accessiblePaths).filter(
                (path) => results.accessiblePaths[path].success,
              ).length > 0 && (
                <div className="bg-red-100 border border-red-300 rounded p-3">
                  <p className="text-sm font-medium text-red-800 mb-2">
                    ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –î–û–°–¢–£–ü–ù–´–ï –ü–£–¢–ò!
                  </p>
                  <div className="max-h-64 overflow-y-auto bg-white rounded border p-2">
                    <div className="text-xs text-gray-800 space-y-1">
                      {Object.entries(results.accessiblePaths)
                        .filter(([_, data]) => data.success)
                        .map(([path, data]) => (
                          <div
                            key={path}
                            className="border-b border-gray-100 pb-2 mb-2"
                          >
                            <div className="font-mono font-bold text-red-600">
                              üö® {path}
                            </div>
                            <div className="text-xs text-gray-600 mt-1">
                              Status: {data.status} | Size: {data.contentLength}{" "}
                              bytes
                            </div>
                            <div className="bg-gray-50 p-1 rounded mt-1 font-mono text-xs">
                              {data.preview}...
                            </div>
                          </div>
                        ))}
                    </div>
                  </div>
                </div>
              )}
              {Object.keys(results.accessiblePaths).filter(
                (path) => results.accessiblePaths[path].success,
              ).length === 0 && (
                <div className="bg-green-100 border border-green-300 rounded p-3">
                  <p className="text-sm text-green-800">
                    ‚úÖ –í—Å–µ –ø—É—Ç–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
                  </p>
                </div>
              )}
            </div>

            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center gap-3 mb-3">
                {getStatusIcon(Object.keys(results.sensitiveFiles).length > 0)}
                <h3 className="font-semibold text-gray-900">
                  üóÇÔ∏è –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                </h3>
              </div>
              <p className="text-sm text-gray-600 mb-3">
                –ù–∞–π–¥–µ–Ω—ã –ª–∏ –∫–æ–Ω—Ñ–∏–≥–∏, —Å–µ–∫—Ä–µ—Ç—ã, —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã?
              </p>
              {Object.keys(results.sensitiveFiles).length > 0 && (
                <div className="bg-red-100 border border-red-300 rounded p-3">
                  <p className="text-sm font-medium text-red-800 mb-2">
                    üö® –ù–ê–ô–î–ï–ù–´ –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–´–ï –§–ê–ô–õ–´!
                  </p>
                  <div className="max-h-32 overflow-y-auto bg-white rounded border p-2">
                    {Object.entries(results.sensitiveFiles).map(
                      ([path, data]) => (
                        <div
                          key={path}
                          className="border-b border-gray-100 pb-2 mb-2"
                        >
                          <div className="font-mono font-bold text-red-600 text-xs">
                            üìÑ {path}
                          </div>
                          <div className="bg-gray-50 p-1 rounded mt-1 font-mono text-xs">
                            {data.content?.substring(0, 100)}...
                          </div>
                        </div>
                      ),
                    )}
                  </div>
                </div>
              )}
              {Object.keys(results.sensitiveFiles).length === 0 && (
                <div className="bg-green-100 border border-green-300 rounded p-3">
                  <p className="text-sm text-green-800">
                    ‚úÖ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞—â–∏—â–µ–Ω—ã
                  </p>
                </div>
              )}
            </div>
          </div>

          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="flex items-center gap-3 mb-3">
              <Icon name="Info" className="text-blue-600" size={20} />
              <h4 className="font-semibold text-blue-900">
                –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã Vite
              </h4>
            </div>
            {Object.keys(results.viteStaticFiles).length > 0 && (
              <div className="text-sm">
                <p className="text-blue-800 mb-2">
                  –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:{" "}
                  {Object.keys(results.viteStaticFiles).length}
                </p>
                <div className="max-h-32 overflow-y-auto bg-white rounded border p-2">
                  {Object.entries(results.viteStaticFiles).map(
                    ([key, data]) => (
                      <div
                        key={key}
                        className="border-b border-gray-100 pb-2 mb-2"
                      >
                        <div className="font-mono font-bold text-blue-600 text-xs">
                          üìÅ {key}: {data.url}
                        </div>
                        <div className="bg-gray-50 p-1 rounded mt-1 font-mono text-xs">
                          {data.content?.substring(0, 100)}...
                        </div>
                      </div>
                    ),
                  )}
                </div>
              </div>
            )}
            {Object.keys(results.viteStaticFiles).length === 0 && (
              <div className="text-blue-800 text-sm">
                ‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
              </div>
            )}
          </div>

          <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
            <div className="flex items-center gap-3 mb-2">
              <Icon name="Shield" className="text-amber-600" size={20} />
              <h4 className="font-semibold text-amber-900">
                –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Directory Traversal
              </h4>
            </div>
            <div className="grid sm:grid-cols-2 gap-4 text-sm">
              <div className="flex items-center gap-2">
                {getStatusIcon(results.canAccessParentDir)}
                <span className="text-gray-700">
                  –î–æ—Å—Ç—É–ø –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
                </span>
              </div>
              <div className="flex items-center gap-2">
                {getStatusIcon(Object.keys(results.sensitiveFiles).length > 0)}
                <span className="text-gray-700">
                  –£—Ç–µ—á–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                </span>
              </div>
            </div>
          </div>
        </div>
      )}

      {!results && !loading && (
        <div className="text-center py-12">
          <Icon
            name="Shield"
            className="mx-auto text-gray-400 mb-4"
            size={48}
          />
          <p className="text-gray-500 text-lg">
            –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É" –¥–ª—è Directory Traversal —Ç–µ—Å—Ç–∞
          </p>
        </div>
      )}
    </div>
  );
};

export default SecurityCheck;
